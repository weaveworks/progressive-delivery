// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProgressiveDeliveryServiceClient is the client API for ProgressiveDeliveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProgressiveDeliveryServiceClient interface {
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	// Gate receives flagger webhook calls
	Gate(ctx context.Context, in *GateRequest, opts ...grpc.CallOption) (*GateResponse, error)
	// GateList list all gates
	GateList(ctx context.Context, in *GateListRequest, opts ...grpc.CallOption) (*GateListResponse, error)
	// GateProceed allows a gate to proceed
	GateProceed(ctx context.Context, in *GateProceedRequest, opts ...grpc.CallOption) (*GateListResponse, error)
}

type progressiveDeliveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProgressiveDeliveryServiceClient(cc grpc.ClientConnInterface) ProgressiveDeliveryServiceClient {
	return &progressiveDeliveryServiceClient{cc}
}

func (c *progressiveDeliveryServiceClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, "/ProgressiveDeliveryService/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *progressiveDeliveryServiceClient) Gate(ctx context.Context, in *GateRequest, opts ...grpc.CallOption) (*GateResponse, error) {
	out := new(GateResponse)
	err := c.cc.Invoke(ctx, "/ProgressiveDeliveryService/Gate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *progressiveDeliveryServiceClient) GateList(ctx context.Context, in *GateListRequest, opts ...grpc.CallOption) (*GateListResponse, error) {
	out := new(GateListResponse)
	err := c.cc.Invoke(ctx, "/ProgressiveDeliveryService/GateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *progressiveDeliveryServiceClient) GateProceed(ctx context.Context, in *GateProceedRequest, opts ...grpc.CallOption) (*GateListResponse, error) {
	out := new(GateListResponse)
	err := c.cc.Invoke(ctx, "/ProgressiveDeliveryService/GateProceed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProgressiveDeliveryServiceServer is the server API for ProgressiveDeliveryService service.
// All implementations must embed UnimplementedProgressiveDeliveryServiceServer
// for forward compatibility
type ProgressiveDeliveryServiceServer interface {
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	// Gate receives flagger webhook calls
	Gate(context.Context, *GateRequest) (*GateResponse, error)
	// GateList list all gates
	GateList(context.Context, *GateListRequest) (*GateListResponse, error)
	// GateProceed allows a gate to proceed
	GateProceed(context.Context, *GateProceedRequest) (*GateListResponse, error)
	mustEmbedUnimplementedProgressiveDeliveryServiceServer()
}

// UnimplementedProgressiveDeliveryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProgressiveDeliveryServiceServer struct {
}

func (UnimplementedProgressiveDeliveryServiceServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedProgressiveDeliveryServiceServer) Gate(context.Context, *GateRequest) (*GateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gate not implemented")
}
func (UnimplementedProgressiveDeliveryServiceServer) GateList(context.Context, *GateListRequest) (*GateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GateList not implemented")
}
func (UnimplementedProgressiveDeliveryServiceServer) GateProceed(context.Context, *GateProceedRequest) (*GateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GateProceed not implemented")
}
func (UnimplementedProgressiveDeliveryServiceServer) mustEmbedUnimplementedProgressiveDeliveryServiceServer() {
}

// UnsafeProgressiveDeliveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProgressiveDeliveryServiceServer will
// result in compilation errors.
type UnsafeProgressiveDeliveryServiceServer interface {
	mustEmbedUnimplementedProgressiveDeliveryServiceServer()
}

func RegisterProgressiveDeliveryServiceServer(s grpc.ServiceRegistrar, srv ProgressiveDeliveryServiceServer) {
	s.RegisterService(&ProgressiveDeliveryService_ServiceDesc, srv)
}

func _ProgressiveDeliveryService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgressiveDeliveryServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProgressiveDeliveryService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgressiveDeliveryServiceServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgressiveDeliveryService_Gate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgressiveDeliveryServiceServer).Gate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProgressiveDeliveryService/Gate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgressiveDeliveryServiceServer).Gate(ctx, req.(*GateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgressiveDeliveryService_GateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgressiveDeliveryServiceServer).GateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProgressiveDeliveryService/GateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgressiveDeliveryServiceServer).GateList(ctx, req.(*GateListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProgressiveDeliveryService_GateProceed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GateProceedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProgressiveDeliveryServiceServer).GateProceed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ProgressiveDeliveryService/GateProceed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProgressiveDeliveryServiceServer).GateProceed(ctx, req.(*GateProceedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProgressiveDeliveryService_ServiceDesc is the grpc.ServiceDesc for ProgressiveDeliveryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProgressiveDeliveryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ProgressiveDeliveryService",
	HandlerType: (*ProgressiveDeliveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _ProgressiveDeliveryService_GetVersion_Handler,
		},
		{
			MethodName: "Gate",
			Handler:    _ProgressiveDeliveryService_Gate_Handler,
		},
		{
			MethodName: "GateList",
			Handler:    _ProgressiveDeliveryService_GateList_Handler,
		},
		{
			MethodName: "GateProceed",
			Handler:    _ProgressiveDeliveryService_GateProceed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/prog/prog.proto",
}
